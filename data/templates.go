// Code generated by go-bindata.
// sources:
// templates/dao/pgx.tmpl
// templates/dao/sqlx.tmpl
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDaoPgxTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xdf\x6f\xe2\x46\x10\x7e\xe7\xaf\x98\x5a\x4d\x64\x52\x64\xd2\xd7\x4a\xb4\x2a\xc1\xa8\x48\x49\x50\x30\x6a\x55\x9d\x4e\x27\x83\xc7\x39\xdf\xd9\x5e\xdf\x7a\x9d\x18\xf9\xf8\xdf\x6f\x76\xbd\x36\x06\x1c\x41\x42\x4e\xa7\x93\xc2\x93\xb5\xf3\xeb\xfb\xbe\x9d\x19\x36\x88\x12\xc6\x05\x18\xf7\x81\xf8\x98\x2d\xac\x25\x8b\xfa\x9f\x22\x16\x70\x16\xf7\xd3\x2f\x61\x6e\x74\x5a\x1c\xb2\x05\xf2\x05\x67\x9e\xe8\x63\x8e\x51\x12\xba\xbc\x1f\x31\x0f\xc3\x8d\xb3\x1f\x09\xa3\xd3\x29\x0a\xee\xc6\xf7\x08\xbf\xea\xe3\x3f\x06\x60\x4d\xd4\x67\xba\x5e\xd7\xbe\x45\xa1\xed\xda\x86\xde\xad\x1b\xe1\x7a\x6d\x50\x3c\xc6\x1e\x79\x76\xc4\x2a\x41\x28\x0a\x6b\xf4\xf7\xb4\xb4\x41\x2a\x78\xb6\x14\x50\xc0\x68\x08\xaa\xb6\x65\x6b\x28\x0e\xa1\x86\x75\xa3\xb8\x1f\x60\xe8\xa9\xda\x63\xf9\x25\x4b\xfb\x59\xbc\x04\x33\x15\x8c\x23\x5c\x50\xfd\x4d\xe2\x2e\x8c\x83\xd8\x1b\xae\xe8\x50\xc5\x59\xf2\x18\xbe\x82\x8c\xb8\x72\x53\xf2\x30\x13\xa8\x8d\x73\xc2\x55\xc5\x99\x2a\x91\xa3\x70\x6d\xce\x7b\x80\x9c\x33\xde\x85\xa2\x03\xf4\x7b\x70\x39\xe4\xd0\xe6\xa8\xcc\xa4\xb8\x04\x6a\x38\xf6\xb5\x7d\x35\x87\x0b\x18\xcf\xa6\x37\xca\x7d\xee\x2e\x42\xed\x09\xff\xfd\x63\xcf\xec\x06\x08\xf7\x3e\xb5\xbc\x85\xf5\xaf\x1b\x66\xd2\x3c\x80\xbf\xe0\x7a\x72\x33\x99\xc3\xef\x86\xca\x4a\x08\x64\x56\x45\xd7\x1a\x0d\xad\xbb\x0c\xf9\x6a\xc6\x1e\x73\x93\xea\xf5\x20\xe9\x6a\x30\xce\xd2\x8d\xcd\xf3\xbc\x0b\x2a\x8a\xa3\xc8\x78\x0c\xe7\xb9\xa2\xd0\x21\x45\x4f\x51\x6d\x9e\xb7\xeb\xd6\x03\x91\xc3\x85\xec\x34\x6b\x9e\x9f\x2c\x22\x7c\x47\x15\x9b\x52\x8a\xfc\xa0\x88\x2f\xd4\xd0\x09\x83\x25\x3e\xbf\xfd\x7a\xc0\xb8\x87\x7c\xb8\x82\x20\x16\xc8\x7d\x77\x89\x05\x1d\x86\x41\x14\x08\x79\x44\x76\xdf\x4f\x51\x7d\x93\xca\xef\xde\x1f\xa3\x73\x2e\xa9\x46\xee\x67\x7c\xda\xff\xb2\xfb\xba\x8a\x97\x52\x07\x7e\x4d\xe7\x17\xca\x6a\x68\x3c\x55\xa5\xdf\x06\x40\xfb\xc5\x72\x12\x4e\x6c\x7c\xd3\x98\xce\x46\xf6\x0c\x86\xff\xc3\x59\x0a\x46\xad\x44\x89\x8c\x24\xd7\x19\x4b\x2d\xfe\x84\xcb\x03\xd9\xca\x4b\x3f\xf3\x64\x2a\x15\xb3\x9b\x48\x2b\x79\x38\xd3\x74\x3c\x76\x6c\x99\xca\xa8\xe4\xaf\x52\xa9\xde\x60\x8f\x69\xaf\x7d\x36\xeb\x9e\xaa\x4a\x4a\x2f\x52\x22\x0e\x42\xda\x78\xba\xa9\xca\x9e\xd2\xc9\x3c\xf4\x91\xab\x94\xd6\x55\xc8\x52\x34\xcb\x50\x9f\xe9\xc3\x5b\xcc\x85\xd9\x6d\xe0\x0d\x64\xd5\x18\x1f\xcd\xb6\x7b\xed\x6e\x68\x51\x37\xdb\x25\x44\x95\xa7\xd1\xe3\xc1\xc6\x8b\x10\x56\x8e\xfb\x28\x2b\xcb\xba\x76\xcf\xe9\xaa\xdd\x24\xa1\xdd\x6e\x12\x89\x60\x4b\x94\x9a\x1b\x65\x79\x95\x79\x39\x6a\xf1\xbc\x8d\xcf\xcf\x3d\x3e\xd5\x3e\x7e\x1b\x9c\x6a\x70\xea\xa7\xd3\xce\x00\x35\xe7\xc7\x71\x1f\xd0\x64\xea\x74\x8f\x48\xd9\xca\x9a\xb7\xbc\x35\x52\x02\xbd\x74\x12\xa7\x48\x6f\xb6\x8d\x1c\xba\x6e\xb9\xbf\x02\x65\x35\x99\x06\x06\x18\xa6\xf8\x94\x6f\x96\x78\xae\xa0\xf2\xfa\xb5\xb1\x6e\x19\xf6\x5d\xac\x34\xca\xed\x68\x77\x1e\x11\x2f\x87\x2e\x2b\xc8\x64\xc7\x13\xa8\x23\x8e\xa3\x51\x29\x74\x84\xe8\x5b\x9b\xa1\x28\xca\x48\xe7\xee\xba\x7a\xc6\x42\x73\x39\x94\x83\xff\x61\xff\xff\x44\x9a\x3d\x7a\x1a\x2f\xcb\xc9\x60\x5b\x93\x31\xd0\x3d\x57\x11\xdc\x56\x8a\xc6\xd1\x25\xfe\xfb\x4d\xd6\xfe\x94\x69\xd2\xac\x2e\xf7\x00\xcd\x1d\x8a\x65\xd4\x2b\x51\x3c\x1a\xeb\xe6\xe6\x9f\xdb\x5b\x27\xdd\x10\xad\xac\x1f\x79\x37\xcf\xe5\x7b\xd2\x55\x3d\xc9\x75\x0b\xf4\xb7\x00\x00\x00\xff\xff\xee\xcd\x35\x13\x8a\x0e\x00\x00")

func templatesDaoPgxTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoPgxTmpl,
		"templates/dao/pgx.tmpl",
	)
}

func templatesDaoPgxTmpl() (*asset, error) {
	bytes, err := templatesDaoPgxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/pgx.tmpl", size: 3722, mode: os.FileMode(420), modTime: time.Unix(1456725754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDaoSqlxTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xdf\x6f\xe2\x46\x10\x7e\xe7\xaf\x98\x5a\x4d\x64\x52\x64\xd2\xd7\x4a\xb4\x2a\xc1\xa8\x48\x49\x50\x30\x6a\x55\x9d\x4e\x27\x83\xc7\x39\xdf\xd9\x5e\xdf\x7a\x9d\x18\xf9\xf8\xdf\x6f\x76\xbd\x36\x06\x1c\x41\x42\x4e\xa7\x93\xc2\x93\xb5\xf3\xeb\xfb\xbe\x9d\x19\x36\x88\x12\xc6\x05\x18\xf7\x81\xf8\x98\x2d\xac\x25\x8b\xfa\x9f\x22\x16\x70\x16\xf7\xd3\x2f\x61\x6e\x74\x5a\x1c\xb2\x05\xf2\x05\x67\x9e\xe8\x63\x8e\x51\x12\xba\xbc\x1f\x31\x0f\xc3\x8d\xb3\x1f\x09\xa3\xd3\x29\x0a\xee\xc6\xf7\x08\xbf\xea\xe3\x3f\x06\x60\x4d\xd4\x67\xba\x5e\xd7\xbe\x45\xa1\xed\xda\x86\xde\xad\x1b\xe1\x7a\x6d\x50\x3c\xc6\x1e\x79\x76\xc4\x2a\x41\x28\x0a\x6b\xf4\xf7\xb4\xb4\x41\x2a\x78\xb6\x14\x50\xc0\x68\x08\xaa\xb6\x65\x6b\x28\x0e\xa1\x86\x75\xa3\xb8\x1f\x60\xe8\xa9\xda\x63\xf9\x25\x4b\xfb\x59\xbc\x04\x33\x15\x8c\x23\x5c\x50\xfd\x4d\xe2\x2e\x8c\x83\xd8\x1b\xae\xe8\x50\xc5\x59\xf2\x18\xbe\x82\x8c\xb8\x72\x53\xf2\x30\x13\xa8\x8d\x73\xc2\x55\xc5\x99\x2a\x91\xa3\x70\x6d\xce\x7b\x80\x9c\x33\xde\x85\xa2\x03\xf4\x7b\x70\x39\xe4\xd0\xe6\xa8\xcc\xa4\xb8\x04\x6a\x38\xf6\xb5\x7d\x35\x87\x0b\x18\xcf\xa6\x37\xca\x7d\xee\x2e\x42\xed\x09\xff\xfd\x63\xcf\xec\x06\x08\xf7\x3e\xb5\xbc\x85\xf5\xaf\x1b\x66\xd2\x3c\x80\xbf\xe0\x7a\x72\x33\x99\xc3\xef\x86\xca\x4a\x08\x64\x56\x45\xd7\x1a\x0d\xad\xbb\x0c\xf9\x6a\xc6\x1e\x73\x93\xea\xf5\x20\xe9\x6a\x30\xce\xd2\x8d\xcd\xf3\xbc\x0b\x2a\x8a\xa3\xc8\x78\x0c\xe7\xb9\xa2\xd0\x21\x45\x4f\x51\x6d\x9e\xb7\xeb\xd6\x03\x91\xc3\x85\xec\x34\x6b\x9e\x9f\x2c\x22\x7c\x47\x15\x9b\x52\x8a\xfc\xa0\x88\x2f\xd4\xd0\x09\x83\x25\x3e\xbf\xfd\x7a\xc0\xb8\x87\x7c\xb8\x82\x20\x16\xc8\x7d\x77\x89\x05\x1d\x86\x41\x14\x08\x79\x44\x76\xdf\x4f\x51\x7d\x93\xca\xef\xde\x1f\xa3\x73\x2e\xa9\x46\xee\x67\x7c\xda\xff\xb2\xfb\xba\x8a\x97\x52\x07\x7e\x4d\xe7\x17\xca\x6a\x68\x3c\x55\xa5\xdf\x06\x40\xfb\xc5\x72\x12\x4e\x6c\x7c\xd3\x98\xce\x46\xf6\x0c\x86\xff\xc3\x59\x0a\x46\xad\x44\x89\x8c\x24\xd7\x19\x4b\x2d\xfe\x84\xcb\x03\xd9\xca\x4b\x3f\xf3\x64\x2a\x15\xb3\x9b\x48\x2b\x79\x38\xd3\x74\x3c\x76\x6c\x99\xca\xa8\xe4\xaf\x52\xa9\xde\x60\x8f\x69\xaf\x7d\x36\xeb\x9e\xaa\x4a\x4a\x2f\x52\x22\x0e\x42\xda\x78\xba\xa9\xca\x9e\xd2\xc9\x3c\xf4\x91\xab\x94\xd6\x55\xc8\x52\x34\xcb\x50\x9f\xe9\xc3\x5b\xcc\x85\xd9\x6d\xe0\x0d\x64\xd5\x18\x1f\xcd\xb6\x7b\xed\x6e\x68\x51\x37\xdb\x25\x44\x95\xa7\xd1\xe3\xc1\xc6\x8b\x10\x56\x8e\xfb\x28\x2b\xcb\xba\x76\xcf\xe9\xaa\xdd\x24\xa1\xdd\x6e\x12\x89\x60\x4b\x94\x9a\x1b\x65\x79\x95\x79\x39\x6a\xf1\xbc\x8d\xcf\xcf\x3d\x3e\xd5\x3e\x7e\x1b\x9c\x6a\x70\xea\xa7\xd3\xce\x00\x35\xe7\xc7\x71\x1f\xd0\x64\xea\x74\x8f\x48\xd9\xca\x9a\xb7\xbc\x35\x52\x02\xbd\x74\x12\xa7\x48\x6f\xb6\x8d\x1c\xba\x6e\xb9\xbf\x02\x65\x35\x99\x06\x06\x18\xa6\xf8\x94\x6f\x96\x78\xae\xa0\xf2\xfa\xb5\xb1\x6e\x19\xf6\x5d\xac\x34\xca\xed\x68\x77\x1e\x11\x2f\x87\x2e\x2b\xc8\x64\xc7\x13\xa8\x23\x8e\xa3\x51\x29\x74\x84\xe8\x5b\x9b\xa1\x28\xca\x48\xe7\xee\xba\x7a\xc6\x42\x73\x39\x94\x83\xff\x61\xff\xff\x44\x9a\x3d\x7a\x1a\x2f\xcb\xc9\x60\x5b\x93\x31\xd0\x3d\x57\x11\xdc\x56\x8a\xc6\xd1\x25\xfe\xfb\x4d\xd6\xfe\x94\x69\xd2\xac\x2e\xf7\x00\xcd\x1d\x8a\x65\xd4\x2b\x51\x3c\x1a\xeb\xe6\xe6\x9f\xdb\x5b\x27\xdd\x10\xad\xac\x1f\x79\x37\xcf\xe5\x7b\xd2\x55\x3d\xc9\x75\x0b\xf4\xb7\x00\x00\x00\xff\xff\xee\xcd\x35\x13\x8a\x0e\x00\x00")

func templatesDaoSqlxTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoSqlxTmpl,
		"templates/dao/sqlx.tmpl",
	)
}

func templatesDaoSqlxTmpl() (*asset, error) {
	bytes, err := templatesDaoSqlxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/sqlx.tmpl", size: 3722, mode: os.FileMode(420), modTime: time.Unix(1456777832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dao/pgx.tmpl": templatesDaoPgxTmpl,
	"templates/dao/sqlx.tmpl": templatesDaoSqlxTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dao": &bintree{nil, map[string]*bintree{
			"pgx.tmpl": &bintree{templatesDaoPgxTmpl, map[string]*bintree{}},
			"sqlx.tmpl": &bintree{templatesDaoSqlxTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

