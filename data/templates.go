// Code generated by go-bindata.
// sources:
// templates/dao/.pgx.tmpl.swp
// templates/dao/.sqlx.tmpl.swp
// templates/dao/pgx.tmpl
// templates/dao/sqlx.tmpl
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDaoPgxTmplSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5b\x6c\x13\xd9\x19\xc7\x0f\xa1\x4d\x1b\x02\x05\xd1\x9b\x5a\x55\xed\x61\x9a\xa4\x76\x9a\x8c\x93\xb4\x2a\x14\xc9\x45\x24\xb1\x21\x52\x20\x17\x1b\x28\x84\x08\x26\xf6\x71\x30\xd8\x33\xc3\xcc\x38\x71\x34\x75\xab\x4a\xed\x03\x2d\x05\x95\x56\xad\xa8\xda\x3e\x54\x2d\x02\x21\x55\xa2\x0f\x55\x4b\x55\x95\x4a\xcb\x5e\x78\xd8\x7d\xd9\xeb\xcb\x3e\xec\xfb\x0a\xad\x60\xdf\x76\xd9\xfd\x9f\xb9\xd8\xe3\x5b\xe2\x84\x40\x90\xf6\xfc\xc5\x2f\xf6\x99\x73\x99\x73\xbe\xef\x3b\x67\xe6\x1c\x3c\x37\x70\x74\xec\x10\xdd\x2d\x7f\x97\x40\x3b\x08\x79\xef\xad\xb7\x8f\xee\x1f\xbd\xd7\xbe\x49\x22\x24\x35\x67\x68\x69\x8b\xac\xa8\xac\xde\x3f\xf8\xfd\xa1\xfe\xc1\xef\xed\xe9\x1f\xec\x1f\x1a\x94\x59\x6a\x48\xce\xaa\x16\x33\x54\x25\x17\x2c\xf7\x63\xb7\xc1\xc8\xa4\xa1\x9d\x65\x29\xcb\x8c\xe8\xcc\x30\x35\x14\x8a\xb0\x22\xcb\xeb\x39\xc5\xe8\x9f\xd7\x22\x8b\xe7\x4c\x3d\x15\x31\x8d\x54\x64\x3e\x6b\x9d\x29\xcc\xc9\x29\x2d\x1f\x29\xcc\x31\xc3\xad\xec\x17\x8d\x58\xce\xa7\xc5\xcc\x48\x5a\xd1\x22\xfa\x7c\x51\xb6\x70\x61\xe5\xde\x0a\x09\x7d\x02\x55\xb0\x32\xfd\x7b\xb6\x91\xef\x0c\x0d\x0e\xf0\xe4\x37\xa5\x5d\xf4\xf3\x3b\x8f\x6c\x74\xaf\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x9e\xa2\x2c\xbd\x8d\xfc\x04\x9f\x6d\x5e\xda\xf4\x3e\x37\xd5\x7c\x6e\xf6\x3e\xf7\xfa\xf5\x6a\xf2\x85\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x84\x9e\x5d\x29\x69\x42\xa2\xf8\xec\xe6\x07\x00\x3b\x2a\xfb\xff\x07\xdb\x09\x79\x0d\xbc\x0a\xfe\x09\x7e\x0b\x2e\x82\x5f\x82\x59\x70\x12\xcc\x80\x5e\xf0\xc6\xe7\x08\xb9\x05\x2e\x80\x9f\x82\x1c\x88\x83\x01\xd0\x0d\xbe\x01\x3a\xc1\x83\x6d\x84\xbc\x0b\x5e\x04\x7f\x01\x36\xd0\xc1\x2c\x98\x01\x27\x40\x0f\x78\x65\x2b\x21\x97\xc0\x22\x50\xc0\x6e\xd0\x09\x3e\xe8\x24\xe4\x1d\xf0\x2f\xf0\x67\x70\x19\xfc\x1c\xe4\xc1\x14\x38\x00\xbe\x0e\x1e\x6e\x21\xe4\x25\x70\x1b\x5c\x01\x17\x81\x05\x0c\x70\x1e\xec\x04\xcf\x77\x10\xf2\x77\xf0\x33\x90\x05\x27\x40\x12\xc4\xc1\x28\x18\x01\xdf\x02\xff\xf8\x2c\x21\xa7\xc1\xd7\xc0\x57\xc1\x57\xc0\xef\x3e\x83\x32\x60\x1f\xd8\x04\x3e\x6a\x27\xe4\x11\x38\x0a\x3a\xc1\xc3\x4f\x13\x72\x07\xdc\x06\xff\x06\xd7\xc0\x22\x38\x0f\x74\x70\x12\xf4\x81\x1e\xf0\xe8\x53\x84\xbc\x09\xae\x83\x6b\xe0\x6f\xe0\xfe\x66\x42\xfe\x0a\x7e\x05\x8e\x83\x04\x98\x06\xfb\xc0\x0e\xb0\x05\x74\x80\xf7\xe1\xb3\xbb\xe0\x7f\xe0\x4f\x60\x11\x9c\x06\x03\x40\x06\x3d\x6d\xae\x5f\xbf\xd0\xd6\x5a\x2c\xd8\x36\x0b\xa2\xa6\x4b\x25\x52\x22\x94\xd2\xea\x14\x35\x98\x55\x30\x54\x6a\xa6\x14\xd5\xb6\x69\x97\x9c\xb0\x8c\x42\xca\x4a\x2e\xe9\xec\xb0\x92\x67\xb4\x54\x9a\xd6\x16\xcd\x90\x81\x3f\x61\xa7\x7c\x9a\x65\x98\x41\x79\x5a\x1e\xc9\x69\x26\x0b\xb9\x97\xb3\x19\xca\x0c\x83\xee\x8a\x52\x35\x9b\xa3\xb6\xdf\x2c\x12\x7d\x4e\x86\x77\x33\x54\x73\xd3\x7b\xa3\xd4\x2a\xca\x53\x05\x66\x2c\x85\xcc\xf3\x28\xa4\xbb\xed\xb8\xe5\xb8\x70\x95\x7e\x3b\x4a\x33\x79\x4b\x4e\xe8\x46\x56\xb5\x32\x21\x69\x22\x1e\x4f\xc4\x92\xb4\x3b\x2d\xf5\x51\x2d\x93\x31\x99\x55\xbe\xbb\x9b\xa4\x3f\xa0\x03\xd4\x26\x2d\x34\x35\x3e\x76\x68\x8c\xb7\x44\xd1\x54\x2e\x9b\xcf\x56\x5a\x72\x52\xad\x37\x34\x31\x3d\x1a\x9b\xa6\xc3\xc7\x69\xb7\xc9\xdb\xd2\x8c\x34\x33\x86\x97\x2a\xfd\x72\xd3\xdc\x32\x92\x84\x16\xfd\x66\x60\x00\x29\x11\x1b\x8f\x8d\x24\x69\x2f\x8d\x4f\x4f\x1c\xa2\xb6\xdd\x25\x27\x95\xb9\x9c\x63\xf8\x52\x89\x1e\x3b\x18\x9b\x8e\xe1\xaa\x8a\xe4\x84\x91\x54\xe6\x69\x57\x26\xcb\x72\x70\x1d\x8d\xd2\x7d\x54\x22\x99\x82\x9a\xa2\x21\xd3\xd2\x0c\x46\x7b\x79\xed\xd1\xfd\x13\x6e\xdd\x30\x8d\x67\xd5\x74\x22\x97\x4d\xb1\xe1\x25\xe4\x38\xf5\x64\xc7\xa1\x3f\xa2\xbc\xda\x88\x62\xa2\x58\xb2\x18\xd2\x69\x39\xdb\xf7\x79\xa9\xd4\x07\xdf\xd0\x5e\xfe\x2b\x9c\x64\xb1\x3c\x22\xea\xfc\x0a\x28\xa3\xa4\x98\x5d\xf2\x4c\xc6\x2f\xf9\x8e\xe0\xdf\xc3\x34\x34\x33\xeb\xf4\xa4\x3a\x8a\x78\x8b\x70\xba\x66\x84\xb9\x49\xd7\x16\x77\x6b\x08\x30\xc7\x32\xf2\xe8\xb0\x08\xb3\x8d\x0d\xb3\x66\x41\xb6\x71\x81\x15\xf2\xd7\x1e\xfe\xdd\x8b\x0b\xd7\x94\xeb\x67\x38\xd7\xf3\x83\x2b\xdb\xef\x71\x67\x28\x8c\xb3\x9e\xa6\xa9\x9e\x35\x75\x06\x7a\x76\x6c\xd3\xd8\x32\x2d\x58\xc3\xb6\x0d\x45\x9d\x67\x5e\x97\xf8\x68\xe4\x38\xff\x66\xe2\xa1\xe8\x58\xca\xb3\xd3\x82\x92\x33\x03\x33\x13\x26\xc3\x83\x93\xf6\x97\x2a\x13\x75\x41\xae\xea\x1e\xee\xe2\x95\xf4\x6e\x80\x11\x30\xac\xa0\x75\x37\x72\x1a\xe1\xcd\xf3\x6b\x33\xb3\x81\x09\x80\xee\x39\x36\x61\x45\x96\xda\x6f\xcc\x9b\x8d\xfd\x14\x5a\xa0\x0d\x07\x19\xae\x6e\xcc\x26\x91\x48\x5c\x33\xf2\x8a\x45\x95\xc6\x15\xf8\xe4\xd2\x90\x69\xf2\x39\x4c\xad\x33\x28\x89\xe0\xa0\x73\x8c\x16\x4c\x96\x46\x2e\xfe\x99\xcc\x40\x7d\x8c\xbc\xa0\xa7\x15\x8b\x61\x59\xc5\xdf\x3c\x53\x2d\xb3\x26\xae\x0c\x66\x16\x72\x16\xd6\x5f\x2c\xca\x35\x2b\x9a\x97\x05\xe7\x2b\xba\x0e\x2b\x86\xca\x65\xf1\x25\x4c\x9b\xd9\x17\x99\xb5\x16\x46\x13\x0b\xb8\xe4\x58\x96\x96\x4a\xab\xb0\x77\xa0\x51\x9e\xa5\xb2\xc5\x50\x43\x1b\x96\x0b\x56\xaa\x04\x06\xe9\x3f\x70\xca\x79\x35\x0f\xa6\xf2\xf5\x70\xb3\x41\x71\xf5\x94\xc7\xb0\xba\x98\xf1\xeb\x7b\x4f\x38\xe7\x35\x2c\x01\x8f\x85\x9a\x46\xa8\x62\xd0\xc0\xbd\x1a\xcd\x98\x55\xde\x3e\xa3\x79\xaf\x7f\x87\x59\xd1\x0a\x85\xbd\x11\x37\x79\x2d\xf4\xfd\x8e\x76\xf2\xca\x39\xd6\x7c\x15\x1f\xe8\x43\x17\x72\x4c\xad\x4c\xc5\xb0\x3b\x11\x5a\x78\x41\x70\x17\x42\x9e\x6c\xe9\x39\x11\x89\x70\x8b\x99\x88\x76\xe6\x74\xd8\x9f\x03\x08\x08\xda\xa4\xb6\x17\xe8\x95\x38\x77\x63\xbc\xc6\xde\x2d\x44\x6b\xeb\x66\x6e\x29\x4a\x83\x41\x5d\x1f\x9d\x8d\x22\x33\x5c\xdb\xe9\xfa\x68\x6c\xbd\x8f\x95\x28\xf4\x82\xd0\xdf\x5a\xb4\x1a\x79\xad\xdd\x6a\xe5\x38\xa0\x3c\x0e\xca\x61\xd0\xc2\x23\xa0\x26\x06\x82\x21\xd0\x24\x00\x88\x85\x04\x06\x51\x79\x42\x61\x21\xe4\x85\xf0\x2e\x3a\x3a\xec\xde\x7b\x44\x53\xd5\x49\x4d\xcb\xc1\x2f\x65\x53\x64\xf3\xba\x86\xf5\x53\xe2\x96\x70\xbe\xca\x63\xce\x07\x4b\xbb\xad\x48\x01\x23\xb8\x45\xf9\xe8\xdd\x32\xce\x03\xc9\x6f\x20\xf0\x03\xfa\xb3\x4a\xea\x5c\x8a\xff\x4a\x5e\x2a\xe7\xe2\x5d\x51\x72\xf6\xff\xff\xc7\x9e\xf6\x6e\x87\xbb\xff\xf7\xff\x7f\xff\x0e\xf6\xf5\x37\xc0\x2f\x40\xc9\xdb\xf3\x1f\x03\x47\x40\x12\xb4\x83\xfb\xd8\xd3\xdf\x03\xff\x05\xbf\x07\xbf\x06\x97\xc1\x25\x30\x0e\x0e\x80\x2f\xf1\x32\xd8\xd3\xdf\x02\x57\xc1\x6f\xc0\x15\x10\x07\x43\xe0\x8b\x60\x3b\x20\xe0\x11\xf6\xf8\x1f\x82\xff\x80\xdb\xe0\x02\x88\x82\x2e\xb0\x15\xb4\xf3\xeb\xd8\xdf\xdf\x04\x37\xc0\x75\xf0\x43\x90\x00\x12\x3f\x1b\xc0\xbe\xfe\x65\x70\x0b\xdc\x04\x7f\x04\x7f\x00\x57\xc1\x18\x38\x08\xbe\x0c\x5e\xc7\x58\x5f\xe8\x70\xc7\xfc\x5c\xc7\x3a\x1f\xa8\x08\x09\x09\x09\x09\x09\x09\x09\x3d\x0d\x55\x6d\xa9\xfd\x57\xf9\x53\xc1\x53\xf3\x58\x91\xa5\xdc\x43\x99\x15\x4e\x09\xb4\xb0\x2c\xcb\xd5\xc7\x36\xb6\xed\xee\xe2\x13\x53\xe3\x93\xf3\xc5\xf2\x6b\x76\xf0\xf0\x46\x22\xb5\xc7\x32\xc1\x53\x19\xb7\x7a\xb2\x18\xd2\x9c\x9c\xfa\x77\xec\xe0\xc1\x94\xf3\xbe\x5d\x77\xfe\xe4\x0f\xaa\xbc\x01\xd1\xb0\x97\x64\x69\x73\xcc\x3d\x6a\x88\xd2\x8c\x92\x33\x59\x70\x0b\x13\x0d\x6e\x61\x1a\xdb\x62\x2d\xa6\x70\xcf\x36\x96\x35\x05\xaf\xb0\x9c\x39\xdc\x26\xd6\xc5\x1c\xa7\xea\x0f\xae\xdd\xd1\x59\xfc\x1c\x78\x6a\x7c\x35\xee\xae\xdb\x18\xea\xbc\x95\x58\x65\x63\xe8\xa7\xab\x77\x87\xfc\x62\x5f\x25\x2f\xd8\x95\x49\x83\xe9\x8a\xc1\x42\x52\xe3\x9b\x9f\x72\xe3\x42\xea\x83\x75\x9f\x48\xc4\x35\x31\xf0\x13\x8f\xb1\xc7\xf3\xc5\x06\x39\xc3\x8d\xca\x86\xce\x58\xb7\x98\x6f\xd5\x21\x75\xa3\x77\x47\x51\x59\x47\xf8\x1c\xf1\x8e\x00\x4b\x94\xc1\x2b\x81\x43\xb4\xaa\x2a\x95\xb9\xe6\x54\xf1\xad\x57\xed\x59\x7b\xb9\x9e\x27\x94\x85\x35\x2e\x5d\xcb\x8e\x02\xde\x6e\xbd\xff\x28\xbc\xc6\x9e\xaf\x68\xf1\x8f\x03\x00\x00\xff\xff\x94\x24\xa4\x03\x00\x40\x00\x00")

func templatesDaoPgxTmplSwpBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoPgxTmplSwp,
		"templates/dao/.pgx.tmpl.swp",
	)
}

func templatesDaoPgxTmplSwp() (*asset, error) {
	bytes, err := templatesDaoPgxTmplSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/.pgx.tmpl.swp", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1457445401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDaoSqlxTmplSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5b\x6c\x14\x55\x18\xc7\x0f\x45\xf1\x82\x08\xd1\x18\x7d\x51\x0f\x6b\xc1\xd9\xa5\x9d\x6d\x45\x54\xc0\x6a\x28\xdd\x86\x6a\x2f\xd2\x5d\x30\x06\x88\x99\xee\x9c\xa9\x03\xb3\x33\xc3\x99\x59\xba\x75\xa8\x1a\xef\x0f\xfa\xa2\x46\xe3\xed\xc1\x44\xf1\x09\x49\x7c\xf0\xc1\x44\xa3\x2f\x9a\x98\x98\xf8\x60\x34\x18\x02\x51\x5f\x7c\x30\x82\x2f\x24\xbe\x18\xff\xe7\xcc\xec\x85\xed\xb6\x5b\x28\xa0\xc4\xf3\x4f\x7e\x99\x3d\xd7\xf9\xbe\xef\x9c\xef\x74\xb6\xb3\x13\x3d\x3b\x87\x46\xe8\xdd\xfa\x9d\x04\x5a\x45\xc8\xc0\x89\xe3\x3b\xbb\x77\x7c\xb3\x6c\x49\x8a\x90\xe2\x04\xf7\xcc\x90\xb4\x55\xdc\xaf\x3b\xe4\x86\x1d\xda\xd6\xb4\xee\x78\x45\xc3\x69\xd1\xef\x89\xb8\x63\xf6\x21\xee\xed\x65\xc5\x30\xc8\xfa\x8c\x07\x9e\x6b\x38\x59\x56\x61\x25\xdf\x31\x78\xf7\xa4\x97\x9d\xda\x17\xf8\xc5\x6c\xc0\x8b\xd9\x49\x3b\x7c\xac\x3c\xa1\x17\xbd\x52\xb6\x3c\xc1\x78\x3c\xb8\xda\x35\x1b\xca\x6b\xc8\x82\xac\x69\x78\xd9\x60\xbf\x53\xd1\x43\xd4\xb4\x37\x57\x49\xe9\xff\xa7\x72\x68\x75\xdf\xb3\x82\xac\xbf\xa3\xb7\x47\x14\x6f\x4b\xad\xa6\xd7\x5f\xb7\xe3\xdf\xb6\x4a\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\xe9\x22\x2a\xf4\x3b\xc8\x93\xb8\x76\x24\xe5\xc7\x93\xeb\x92\xa6\xeb\xd2\xe4\xba\x2c\xb9\x46\x4d\xed\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\xff\x5d\x19\x26\x21\x77\xe1\xba\x49\xfc\x03\x60\x55\xfd\xfb\xff\x89\x95\x84\x7c\x0c\x3e\x00\xef\x83\xe7\x81\x09\x76\x83\x5d\x40\x03\xb7\x83\xe5\xe0\xf5\x6b\x09\x99\x02\x6b\xc0\xc9\x15\x84\x1c\x03\x3f\x81\xa3\x60\x07\xd8\x00\x7e\xbd\x86\x90\xe3\xe0\x08\x78\x07\xbc\x05\xde\x04\x7f\x2e\x27\xe4\x6b\x70\x10\x30\xd0\x0b\xd6\x81\x0c\xb8\x11\xfc\x76\x35\x21\xbf\x80\x9f\xc1\xb7\xe0\x5d\xf0\x06\x70\xc1\x03\x60\x3d\xb8\x19\x9c\xbe\x8a\x90\xef\xc0\x7b\xe0\x45\xf0\x34\xf0\x81\x0b\x4a\xe0\x93\x2b\x09\x79\x09\x6c\x01\x19\x70\xfa\x0a\x42\x4e\x81\x93\xe0\x18\x38\x0c\x3e\x04\x87\xc0\x2b\x60\x02\xec\x06\x1b\xc1\x0d\xe0\xef\x65\xb0\x05\x7c\x09\xde\x06\x0e\xc8\x83\x11\xb0\x19\x6c\x04\xbd\xa0\x07\x9c\xba\x1c\xbe\x83\x4f\xc1\x61\xf0\x32\x78\x01\x3c\x07\x9e\x05\x1b\xc0\x2d\xe0\xaf\xcb\x08\xf9\x1d\x7c\x05\xbe\x00\x9f\x83\xcf\x40\x04\x0e\x80\x6d\xe0\x56\xb0\x1c\xfc\xb1\x14\xf7\x07\x47\xc1\x8f\xe0\x07\xf0\x1a\x78\x15\x30\x70\x2f\xe8\x06\xeb\x40\x46\xf4\xc3\x7a\x7e\x0f\x0e\x81\x67\x80\x07\xc6\xc1\x30\xe8\x03\x9b\x3b\xe2\x35\x4f\x77\xb4\xd9\x20\x33\x84\x36\x02\x71\x16\x96\xb9\xdb\x54\x62\x9c\xcb\x62\x5c\x09\x79\xfa\x28\x63\x66\x30\xe4\x06\x8c\x87\xb4\x8f\x5a\x86\x13\x30\xd9\x68\x5b\xa2\x37\xed\xeb\xa3\xae\xed\xd0\x48\xd6\x3d\xda\x25\xeb\x36\xf5\xd1\xb0\xa2\x8f\x1a\x25\x66\xe6\x2a\xac\xa8\x05\xfb\x9d\x2e\xea\xa5\x65\x17\x7c\x16\xed\xa9\x28\xb2\xe5\x9c\xf9\xed\xc3\x54\x1f\xb4\x99\x63\x06\x54\x2f\x18\x13\x0e\x13\xe3\x66\x66\x52\xb2\x37\xb1\xca\x6e\x91\x6a\x41\xe8\x71\x46\x33\x51\xa4\x0f\x6c\x19\x8b\xdb\xd3\x34\x1e\x5f\xa8\x68\x9e\x6c\xc9\x87\xbc\x5c\x0c\x0b\xd3\x7e\x32\x41\x17\x6c\xa0\x19\xf9\x83\x92\x42\x25\x2d\xec\xf2\x38\xcc\x6c\xed\x6f\xdd\x70\x79\x2b\x7d\xa0\xbf\xad\xf9\x65\xdf\x34\x42\x36\xb7\xf9\xf3\x99\x1e\x8f\x9d\xc3\xf0\x76\xb6\x2e\x7a\x6d\x16\xec\xe2\xf9\x59\xa1\x85\xba\x59\xf3\xab\xea\x70\x6c\x67\x1c\x2b\xb1\xcc\x62\x45\xd3\x34\xee\x4b\x19\x7c\x4d\x3c\x9b\x35\xa4\xbe\x33\xe4\x90\x6a\x48\xce\x8c\x57\x34\x9f\xe5\x79\xe3\x00\x3b\xc7\x9d\x35\xaf\x1b\x9a\x77\x16\x0e\x68\xde\xb9\x9a\xde\x3e\xe4\x51\xc4\x5c\x73\x66\xe6\xcc\x1d\x56\xe9\x12\xfb\xa5\xc9\x8b\x0a\x76\x96\xe1\xfb\xe8\xae\xa1\xdd\x4e\xd7\x1a\x60\x56\x50\x34\xdc\x1c\x36\xd5\xea\x64\xa3\xd5\x27\xaa\xb6\xd4\xe7\xa9\xd6\x60\x6b\x71\x6f\x2a\x48\x8c\xcb\xa3\x56\x6b\x9c\x54\xb4\xbb\x6c\x4a\x8b\xa2\xce\xd9\xf6\xcb\x6e\x16\x3c\x90\x33\x8c\xb2\x4a\xa8\xa5\x93\x18\x9a\xcc\x62\x49\xfd\x56\xc7\x0b\x98\x96\x6e\xcc\x84\xd9\x06\xca\xea\xc4\x7b\x0c\x6a\x3c\xb8\xb6\x97\x19\x9f\xae\xc4\x39\xe1\xa7\x9b\xc2\x21\xb2\x63\x1d\x72\xad\x14\xea\x79\x9f\xdb\x6e\x68\x69\xa9\xb1\xc1\xc1\x7c\xae\x40\xd7\x98\x29\x24\x91\x65\x05\x2c\xac\x2f\x9c\x2c\xd2\xfb\x68\x8f\x88\x7a\xfb\xa9\x86\x87\x46\x86\xc4\x4c\x14\x53\x39\x76\xc9\xae\xcf\x24\x4b\x0b\x9f\x68\x6c\x7c\x20\x37\x4e\xfb\x1f\xa1\x6b\x02\x31\x97\xc7\x4d\xc6\xfb\xa7\xeb\x76\xc5\x65\x11\x98\x54\x2a\x09\x61\x35\xf1\xf3\xb9\xe1\xdc\xd6\x02\xcd\xd0\xc1\xf1\xb1\x11\x2a\x16\xa2\x21\xeb\xe9\xc3\xdb\x72\xe3\x39\xd4\xba\x28\x8e\xf1\x82\x31\x49\x3b\x2d\x71\x38\xa0\xa9\x8f\xde\x4f\xe3\x53\xa1\x22\x26\x2a\x19\xfb\x98\xb6\x6b\x4f\xa6\xd5\x52\x76\xd1\x9e\x74\xf3\x2e\xee\x6c\xdc\xc6\x83\xb6\x6b\xe6\x1d\xbb\xc8\xfa\xa7\xd1\x22\xef\x20\xcf\x2b\x7a\x90\x8a\x61\x5b\x8d\x00\xdd\x90\xa2\x3e\xad\x35\xcf\x91\xa1\x35\xe7\x71\x1e\x85\x8c\x5b\x46\x91\x45\x33\x49\x74\x45\x55\x75\xcd\xc4\xe7\x34\x9d\xdb\x60\x99\x3b\xe9\x59\xc7\xb2\x4a\x9a\x86\xbf\x28\x2a\x75\x2e\x95\xd4\x99\x2b\x71\x2e\x68\xae\xac\x8d\xb7\x90\xac\x6a\x3a\x6f\xc7\xbd\xa9\xda\xbe\x69\xdc\xe6\x6b\x93\xbf\xdf\xe7\x2f\xcc\xf1\x3e\xe9\x8d\xa3\x7d\xc0\xe0\x88\x78\x2b\x27\x66\x3d\xd9\xcc\x8a\xf1\xa2\x4f\x26\x44\x70\xd1\xf1\x3b\x33\xf5\xe6\x89\xe2\xc5\x8f\xe0\xa2\x02\xd8\x3a\x7c\x0b\x88\x58\x14\x71\xc3\x9d\x64\x89\xc5\xc2\xd9\xe4\xe1\x15\x06\x91\x10\x23\x68\xe3\xf3\x12\xe2\x27\x66\xc2\x21\x37\xd0\x4f\x4b\x9e\xc9\x1c\x3d\x97\xfc\x34\x3d\x8f\x45\xc2\x49\x51\x7b\x54\xb2\x4b\xbe\x87\x87\x2f\x3c\x17\x77\xc6\x1f\xf5\x21\x79\x61\x66\xf5\x79\xb8\x76\xeb\xa4\xab\xb8\x77\xdc\x47\xde\xbc\x3a\x01\x0e\x9b\x54\xad\x30\xff\xaf\xe3\xa5\x45\x2d\x3b\xef\x2d\x79\x36\xf7\x5c\xf9\x8b\xf9\x94\xfc\xfe\x7f\x13\xbe\xc3\x0f\xaf\x8c\xbf\xff\x57\xdf\xef\x1f\x41\xf9\x23\xf0\x14\xd8\x03\x46\x93\x3e\x0f\xae\xbc\x50\xff\x89\x50\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\xba\x34\xd4\xe6\x05\xe1\x02\xde\x6c\x2e\xfe\xd5\xe0\xd9\xbe\x7b\xfa\x27\x00\x00\xff\xff\x70\xd0\x93\xce\x00\x40\x00\x00")

func templatesDaoSqlxTmplSwpBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoSqlxTmplSwp,
		"templates/dao/.sqlx.tmpl.swp",
	)
}

func templatesDaoSqlxTmplSwp() (*asset, error) {
	bytes, err := templatesDaoSqlxTmplSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/.sqlx.tmpl.swp", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1457446727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDaoPgxTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x09\xed\x20\x65\x9a\xd2\xbd\x0e\xf0\x86\x3a\xb1\xb1\x00\x69\x9d\xda\x06\x86\x61\x18\x02\xc6\x3a\xb9\x5e\x65\x49\x25\x69\xd7\x81\xe6\xef\xbe\x23\x29\x2a\x92\x2d\xd7\x92\x9b\x61\x7d\xa8\x11\x38\x32\xc9\xfb\xf7\xbb\xdf\x1d\x4f\xcb\x55\x96\x72\x09\x4e\xb4\x92\x4e\xcf\xfe\x58\x2c\xe5\xfb\xf5\x43\x30\x4f\x57\x97\x7f\xb3\xf9\x87\xf9\x65\xb6\xd8\x3a\xbd\x5e\x9e\x73\x96\x2c\x10\x5e\x14\xe7\x7e\xee\x43\x70\xa3\x1f\xc5\x6e\x57\x0a\xe7\x79\xb1\x5f\xec\x61\xf8\x96\xad\x70\xb7\x73\x48\x1e\x93\x90\x4e\xf6\xe4\x63\x86\x90\xe7\xc1\xf5\xeb\xb1\xd9\x03\x21\xf9\x7a\x2e\x21\x87\xeb\x01\x5c\x90\xb5\xe0\x2a\x4d\x92\xbb\x34\x8d\x81\x8e\xf7\x2e\x2f\xa7\x73\x96\x08\x90\xef\x11\x78\xfa\x09\x96\x89\x4c\x81\x41\x82\x9f\xe0\x82\xcc\x05\x53\x2d\x3d\x23\xad\x46\x5d\x2f\x5a\x27\x73\x10\x24\x93\xe7\xb0\xbf\x0d\xbb\xdd\x84\x74\xb8\x4a\x91\x36\x45\xbf\x3c\x70\x1b\x15\xf9\x80\x9c\xa7\xdc\x83\xbc\x12\x7c\x12\xe2\xd6\x87\x17\xd1\x12\xe3\x50\x63\x30\x52\x4f\x02\x7e\x24\xc3\x40\x9f\x0d\xe3\xb0\x51\x28\xa8\x83\x14\x1b\x3d\xea\xb3\x41\xc5\x41\x0b\x85\x3a\x4f\x26\x94\x1a\xf2\x27\x50\x61\xba\x1d\x4c\xa9\xcf\xf7\x15\x5b\x3e\xc9\x02\x69\x2e\x0f\x78\xfa\x7b\x19\x69\x23\xdf\xf5\x21\x59\xc6\x14\x8b\x15\xe5\x28\xd7\x3c\x51\x8b\x3a\x50\xbd\x6e\xe4\x38\x0a\x65\x8f\x10\x76\x9b\x70\xf1\x3a\xf8\x48\xaa\x82\x12\x82\x22\xdd\xfd\x27\x80\x40\xa3\x51\x75\xba\xf0\x8a\xe4\x7c\xe5\x5a\x6f\x77\x40\x00\x51\x65\xc0\x9f\x7f\x9d\xcb\x01\xe1\x6a\x5d\x96\x04\x82\x58\x70\x44\x59\x85\x07\x45\x48\xeb\x58\x6a\x84\x56\xec\x03\x1e\x97\x7a\xe5\x53\xf6\x63\x4c\x2c\x28\x0a\x39\xa5\x20\xc4\x08\xb9\x8e\x24\xb8\x8a\x53\x81\xae\x59\x8e\xd2\x62\xf1\x2d\x6e\xa5\x6b\xad\x75\xa3\x43\x1b\xf6\x19\xad\x35\xa2\xd4\x89\x28\x0a\x26\x76\x37\x7f\xc8\xc8\x23\xc6\xbc\xf2\xe9\x18\x3b\x8f\x31\xf4\x89\xa5\xad\x98\xda\x3d\x86\x16\x8c\x3d\x12\x94\x25\x46\x1f\x58\x96\xd1\xa6\x5b\x2c\xf8\x6a\xc7\x83\x5a\x81\x59\x92\x9b\xfd\x92\xe8\xa3\x94\xaf\x98\x24\x6e\x37\x52\xca\x12\x5f\xc4\xcb\x39\x52\x39\xd0\x49\x4a\x14\x3c\x20\xac\x05\x86\xb4\x4b\x7f\x02\xa9\x0d\x33\xf2\x6c\x9d\x85\x4c\x22\xf5\x56\xfa\x5e\x61\x22\x85\xa9\x09\xdc\xe2\xfc\x35\x5f\x88\xe6\xba\x70\x37\xcd\x96\x3d\x2a\x34\x32\x8e\x3c\x62\x73\xcc\x77\x79\x6f\xc3\x62\x8d\x7c\x6d\xf9\x3c\xca\xee\xa3\xdd\x48\x1a\xf5\x5d\xa0\xa6\x4c\x2b\xb4\x4a\x33\xfb\xea\x6d\xf9\xbb\x42\xa6\x1c\x4d\x40\xe5\x65\xe3\xc1\x88\xdc\x1a\x3c\xd6\x8c\xc2\x3f\xa0\x24\xae\x98\xa0\x13\x6e\xd6\x54\x36\x2d\x2e\x09\xe5\xa7\xf8\x18\x2b\x4f\x9c\xe9\xf0\x76\x78\x35\x83\x0b\x18\x4d\xc6\x6f\x94\xbe\x60\xc6\x1e\x62\x9b\xc7\xdf\x7f\x1b\x4e\x86\xb4\x9a\xd0\xcf\x31\x9f\xb1\x45\x11\x84\xa6\xda\xaf\x70\x7b\xf3\xe6\x66\x06\x3f\x39\x55\xae\x7c\xb6\x97\x99\x48\x83\xeb\x41\xf0\x6e\x8d\xfc\x51\xaf\x7c\xa4\xa2\xc9\x3c\x4f\x21\xf5\x25\x68\xcc\xb6\xcd\x78\xf8\x20\xb7\xa6\x79\xce\xb6\xff\x1b\x36\xed\x01\x92\xdb\xf3\xa0\x99\xaa\x52\xeb\xce\x16\x1f\x52\x1e\x22\x1f\x3c\x42\xa5\x3c\x7c\x88\x97\xab\xa5\x54\x4b\xb4\x1f\x45\x02\xf5\x73\xeb\x8b\xe7\x59\xf0\x73\xec\x4c\x60\x1d\xa4\xce\xeb\x38\x95\xc6\xab\xac\xfc\xd0\x07\x1a\x09\x83\x69\xc6\xc9\xbf\xc8\x75\xc6\x93\xeb\xe1\x04\x06\x7f\xc0\x4b\x01\x4e\x19\x9b\x57\x54\xa6\xd5\x68\xa2\xfb\x05\x5e\x9d\xd0\x66\x52\xf8\x32\x54\xaa\xb4\xcc\xbe\xa2\x02\x9b\xd3\x9a\xc6\xa3\xd1\x74\xa8\x54\x39\x16\x50\xaf\xda\x65\xe9\x2a\xf3\xed\xbd\x56\xaf\x10\xcb\x81\xa6\x01\x69\xff\xda\xa9\xf7\xec\x16\x33\xc5\xf3\x10\xab\x4d\xe1\x7d\xa3\xd9\xd7\x46\x33\xdb\x67\xce\x20\xd8\x91\xb1\xb0\x1b\xef\xca\xb7\xac\x3d\xfe\x55\xe9\x37\x65\x1b\x74\x53\xbd\x7a\x78\xcf\x6b\x2a\x14\x78\x28\x8c\x68\x1a\xc5\x50\xdc\x98\xb9\xe2\xe0\xe5\xc1\x54\x95\x99\x3a\xdc\xb4\x40\x05\x30\x16\x78\xec\xac\x19\x4b\xe8\xac\x9d\x87\x4e\xfb\x4a\x95\xd0\xec\x6d\xfd\x0e\x3a\xdf\x73\x65\x40\xe9\x6a\xef\x7f\x29\xd1\x2e\x0a\x0b\x50\x0b\xcc\x6b\x25\x98\xe7\x46\x72\xfa\xee\xf6\x6e\xb1\x2d\xc7\xa7\x6a\x21\x9a\x42\x13\x72\x45\xc5\x9e\xa9\x7f\xc3\xbd\x7e\x77\xc7\x31\x63\x1c\x5d\xa7\x99\x3d\xf7\xc6\x82\xe3\x93\xcd\x92\xad\xa5\xa2\x63\x2f\x8d\xf6\x40\xb5\xa2\xee\x0f\x7b\xed\x90\x86\x4d\x57\x1d\x0d\x28\x02\xff\xd4\xec\x99\x7a\x41\x10\xd4\x2a\xa6\xbf\x67\xbe\x9e\x53\xaa\x52\x1a\x05\xf1\x70\xae\x56\xef\x0a\x9f\x4f\x88\x65\xe1\x89\x84\xec\x25\xc3\x48\xfd\x97\xc9\x30\x16\xbe\x2c\x19\xcf\x9d\x8b\xd6\xa0\x3e\x15\x53\xc7\x6a\x3d\x8f\xf3\xf7\xd5\xa6\x6b\xa2\xa3\x9e\xfb\xb5\x71\xac\x23\x1c\xe7\x31\xae\x19\x8a\x73\x73\xfc\x6f\x00\x00\x00\xff\xff\x0c\x39\xc0\x7d\x16\x14\x00\x00")

func templatesDaoPgxTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoPgxTmpl,
		"templates/dao/pgx.tmpl",
	)
}

func templatesDaoPgxTmpl() (*asset, error) {
	bytes, err := templatesDaoPgxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/pgx.tmpl", size: 5142, mode: os.FileMode(420), modTime: time.Unix(1457445361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDaoSqlxTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x6d\x6b\xdb\x48\x10\xfe\xee\x5f\x31\x27\x2e\x41\xce\x19\x39\xf7\xf5\xc0\x77\x9c\x63\x99\x33\x24\x31\xb1\x0c\x47\x29\xa5\xc8\xd6\x28\xdd\x56\xd2\xaa\xab\x75\x22\xa3\xfa\xbf\x77\x76\xb5\x92\xdf\x14\xec\xc4\x29\xa5\x90\x7c\x52\x76\xde\x9e\xe7\xd9\x99\xf1\xb2\x38\xe5\x42\x82\x75\xcf\xe4\xa7\xc5\xcc\x99\xf3\xb8\xfb\x39\xe6\x4c\xf0\xa4\x9b\x7d\x8d\x72\xab\xd5\xe0\xb0\x98\xa1\x98\x09\x1e\xc8\x2e\xe6\x18\xa7\x91\x2f\xba\x31\x0f\x30\x5a\x3b\x87\xb1\xb4\x5a\xad\xa2\x10\x7e\x72\x8f\xf0\xbb\x39\xfe\xab\x07\xce\x48\x7f\x66\xab\x55\xed\x5b\x14\xc6\x6e\x6c\x18\xdc\xfa\x31\xae\x56\x16\xc5\x63\x12\x90\x67\x4b\x2e\x53\x84\xa2\x70\x06\xff\x8e\x4b\x1b\x64\x52\x2c\xe6\x12\x0a\x18\xf4\x41\xd7\x76\x5c\x03\xc5\x23\xd4\xb0\xda\x28\x1e\x32\x8c\x02\x5d\x7b\xa8\xbe\x54\xe9\x70\x91\xcc\xc1\xce\x24\x17\x08\x17\x54\x7f\x9d\xb8\x0d\x43\x96\x04\xfd\x25\x1d\xea\x38\x47\x1d\xc3\x37\x50\x11\x57\x7e\x46\x1e\x76\x0a\xb5\x71\x4a\xb8\xaa\x38\x5b\x27\xf2\x34\xae\xf5\x79\x07\x50\x08\x2e\xda\x50\xb4\x80\xfe\x1e\x7c\x01\x39\x34\x39\x6a\x33\x29\xae\x80\x5a\x9e\x7b\xed\x5e\x4d\xe1\x02\x86\x93\xf1\x8d\x76\x9f\xfa\xb3\xc8\x78\xc2\xff\xff\xb9\x13\x97\x4e\x13\xfa\x77\x2c\xa6\xfe\xbd\xe1\x48\xa6\x1e\xfc\x03\xd7\xa3\x9b\xd1\x14\xfe\xb4\x74\x46\xaa\xae\x32\x6a\xaa\xce\xa0\xef\xdc\x2d\x50\x2c\x27\xfc\x31\xb7\xa9\x56\x07\xd2\xb6\x01\xe2\xcd\xfd\xc4\x3e\xcf\xdb\xa0\xa3\x04\xca\x85\x48\xe0\x3c\xd7\xf0\x5b\xa4\xe6\x29\x8a\x4d\xf3\x66\xcd\x3a\x20\x73\xb8\x50\x5d\xe6\x4c\xf3\x93\x05\x84\x1f\xa4\xe0\xa6\x8c\x32\x3f\x28\xe0\x0b\xf5\xf3\x22\x36\xc7\xe7\xb7\x5d\x07\xb8\x08\x50\xf4\x97\xc0\x12\x89\x22\xf4\xe7\x58\xd0\x61\xc4\x62\x26\xd5\x11\xd9\xc3\x30\x43\xfd\x4d\x0a\xbf\xff\x70\x8c\xc6\xb9\xa2\x1a\xfb\x5f\xf0\x69\xff\xcb\xf6\xeb\xa9\x5d\xca\xcc\xc2\x9a\xca\x6f\x94\xd1\x32\x58\xaa\x2a\x7f\xf4\x80\x76\x8a\xe3\xa5\x82\x98\x84\xb6\x35\x9e\x0c\xdc\x09\xf4\xdf\xc1\x59\x06\x56\xad\x42\x89\x8a\xe4\x36\x19\x4b\x1d\xfe\x86\xcb\x03\xd9\xca\x0b\x3f\x0b\x54\x2a\x1d\xb3\x9b\xc8\xa8\x78\x38\xd3\x78\x38\xf4\x5c\x95\xca\xaa\xa4\xaf\x52\xe9\xbe\xe0\x8f\x59\xa7\x79\x26\xeb\x7e\xaa\x4a\x2a\x2f\x52\x22\x61\x11\x6d\x39\xd3\x50\x65\x3f\x99\x64\x01\x86\x28\x74\x4a\xe7\x2a\xe2\x19\xda\x65\x68\xc8\xcd\xe1\x2d\xe6\xd2\x6e\x6f\xe0\x65\xaa\x6a\x82\x8f\x76\xd3\x9d\xb6\xd7\xb4\xa8\x93\xdd\x12\xa2\xce\xb3\xd1\xdf\x6c\xed\x45\x08\x2b\xc7\x7d\x94\x95\x65\x55\xbb\xe7\x74\xd5\x7e\x9a\xd2\x3e\xb7\x89\x04\xdb\x12\xa5\xe6\x46\x59\x5e\x65\x56\x8e\x5a\x38\x6f\xa3\xf3\xeb\x8e\x4e\xb5\x87\xdf\x86\xa6\x1a\x9a\xfa\xa9\xb4\x33\x3c\x9b\xb3\xe3\xf9\x0f\x68\x73\x7d\xba\x47\xa4\x6c\x63\xc3\x5b\xdd\x1a\x29\x81\x41\x36\x4a\x32\xa4\x37\xda\x5a\x0e\x53\xb7\xdc\x5d\x4c\x5b\x6d\x6e\x80\x01\x46\x19\x3e\xe5\xbb\x48\x03\x5f\x52\x79\xf3\xc2\x58\x35\x0c\xfa\x2e\x56\x1a\xe3\x66\xb4\x3b\x0f\x87\x97\x43\x57\x15\x54\xb2\xe3\x09\xd4\x11\xc7\xd1\xa8\x14\x3a\x42\xf4\xad\xad\x50\x14\x65\xa4\x77\x77\x5d\x3d\x5b\x61\x73\x31\x94\x83\xff\x71\xff\xb7\x44\x99\x03\x7a\x0a\xcf\xcb\xc9\xe0\x5b\x93\xd1\x33\x3d\x57\x11\xdc\x56\x8a\xc6\xd1\x27\xfe\xfb\x4d\xd6\xfc\x84\xd9\xa4\x59\x5d\xee\x01\x9a\x3b\x14\xcb\xa8\x57\xa2\x78\x34\xd6\xf5\xcd\x3f\xb7\xb7\x4e\xba\x21\x5a\x59\x3f\xf3\x6e\x9e\xcb\xf7\xa4\xab\x7a\x92\xeb\x16\xe8\xef\x01\x00\x00\xff\xff\x7e\xa9\xa5\x6a\x7a\x0e\x00\x00")

func templatesDaoSqlxTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDaoSqlxTmpl,
		"templates/dao/sqlx.tmpl",
	)
}

func templatesDaoSqlxTmpl() (*asset, error) {
	bytes, err := templatesDaoSqlxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dao/sqlx.tmpl", size: 3706, mode: os.FileMode(420), modTime: time.Unix(1457446724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dao/.pgx.tmpl.swp": templatesDaoPgxTmplSwp,
	"templates/dao/.sqlx.tmpl.swp": templatesDaoSqlxTmplSwp,
	"templates/dao/pgx.tmpl": templatesDaoPgxTmpl,
	"templates/dao/sqlx.tmpl": templatesDaoSqlxTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dao": &bintree{nil, map[string]*bintree{
			".pgx.tmpl.swp": &bintree{templatesDaoPgxTmplSwp, map[string]*bintree{}},
			".sqlx.tmpl.swp": &bintree{templatesDaoSqlxTmplSwp, map[string]*bintree{}},
			"pgx.tmpl": &bintree{templatesDaoPgxTmpl, map[string]*bintree{}},
			"sqlx.tmpl": &bintree{templatesDaoSqlxTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

