import "fmt"
import "github.com/jackc/pgx"

{{range $import := .Imports}}
import "{{$import.ImportedName}}"
{{end}}

type {{.FinderName}} struct { DB *pgx.ConnPool }
type {{.StoreName}} struct { DB *pgx.ConnPool }


//Scans the row into a new *{{$.StructTypeName}}
func scan{{ $.StructTypeName }}Row (row *pgx.Row) (*{{$.StructTypeName}}, error) {
{{range $index, $field := .Fields -}}
    var v{{$index}} {{$field.TypeName}}
{{end}}
    err := row.Scan(
{{range $index, $field := .Fields -}}
        &v{{$index}},
{{ end -}}
    )
    if err != nil {
        return nil, err
    }
    res := new({{$.StructTypeName}})
{{range $index, $field := .Fields -}}
    res.{{$field.Name}} = v{{$index }}
{{ end -}}
   return res, nil
}

//Scans the rows into a new []*{{$.StructTypeName}}
func scan{{ $.StructTypeName }}Rows(rows *pgx.Rows) ([]*{{$.StructTypeName}}, error) {
    results := make([]*{{$.StructTypeName}}, 0, {{len .Fields}})
    defer rows.Close()
    for rows.Next() {
    {{range $index, $field := .Fields -}}
        var v{{$index}} {{$field.TypeName}}
    {{ end -}}
        err := rows.Scan(
    {{range $index, $field := .Fields -}}
            &v{{$index}},
    {{ end -}}
        )
        if err != nil {
            return nil, err
        }
        res := new({{$.StructTypeName}})
    {{range $index, $field := .Fields -}}
        res.{{$field.Name}} = v{{$index }}
    {{ end -}}
        results = append(results, res) 
    }
    return results, nil
}

//Format a *{{$.StructTypeName}} into a slice that can be used in insert and update statements
func execArgs{{ $.StructTypeName }}(v *{{$.StructTypeName}}) []interface{}{
vals := []interface{} {
    {{range $index, $field := .Fields -}}
        v.{{$field.Name}},
    {{ end -}}
    }
  return vals
}

{{range $field := .Fields}}
func (store *{{$.FinderName}}) FindBy{{$field.Name | funcCase}}(p {{$field.TypeName}}) (*{{$.StructTypeName}}, error) {
    sql := "SELECT * FROM {{$.TableName}} WHERE {{nameOrTag $field}} = ? LIMIT 1"
    return scan{{ $.StructTypeName }}Row(store.DB.QueryRow(sql, p))
}

func (store *{{$.FinderName}}) FindBy{{$field.Name | funcCase}}Tx(p {{$field.TypeName}}, tx *pgx.Tx) (*{{$.StructTypeName}}, error) {
    sql := "SELECT * FROM {{$.TableName}} WHERE {{nameOrTag $field}} = ? LIMIT 1"
    
    return scan{{ $.StructTypeName }}Row(tx.QueryRow(sql, p))
}

func (store *{{$.FinderName}}) FindSliceBy{{$field.Name | funcCase}}(p {{$field.TypeName}}, orderBy interface{}, limit int, offset int) ([]*{{$.StructTypeName}}, error) {
    sql := "SELECT * FROM {{$.TableName}} WHERE {{nameOrTag $field}} = ? "
    if orderBy != "" {
        sql += fmt.Sprintf("ORDER BY %s ", orderBy)
    }

    if limit > 0 {
        sql += fmt.Sprintf("LIMIT %d ", limit)
    }

    if offset > 0 {
        sql += fmt.Sprintf("OFFSET %d", offset)
    }
    rows, err := store.DB.Query(sql, p)
    if err != nil { return nil, err }
    return scan{{ $.StructTypeName }}Rows(rows)
}

func (store *{{$.FinderName}}) FindSliceBy{{$field.Name | funcCase}}Tx(p {{$field.TypeName}}, tx *pgx.Tx, orderBy interface{}, limit int, offset int) ([]*{{$.StructTypeName}}, error) {
    sql := "SELECT * FROM {{$.TableName}} WHERE {{nameOrTag $field}} = ? "
    if orderBy != "" {
        sql += fmt.Sprintf("ORDER BY %s ", orderBy)
    }

    if limit > 0 {
        sql += fmt.Sprintf("LIMIT %d ", limit)
    }

    if offset > 0 {
        sql += fmt.Sprintf("OFFSET %d", offset)
    }
    rows, err := tx.Query(sql, p)
    if err != nil { return nil, err }
    defer rows.Close()
    return scan{{ $.StructTypeName }}Rows(rows)
}
{{end}}


func (store *{{$.StoreName}}) Insert(o *{{.StructTypeName}}) error {
    
    sql := "{{insertSQLPgx .Fields .TableName}}"
    stmt, pstmtErr := store.DB.Prepare("{{ $.StructTypeName }}_insert",sql)
    if pstmtErr != nil {
        return pstmtErr
    }

    _, err := store.DB.Exec(stmt.SQL, execArgs{{ $.StructTypeName }}(o)...)
    return err
}

func (store *{{$.StoreName}}) Update(o *{{.StructTypeName}}) error {

    sql := "{{updateSQLPgx .Fields .TableName}}"
    stmt, pstmtErr := store.DB.Prepare("{{ $.StructTypeName }}_update",sql)
    if pstmtErr != nil {
        return pstmtErr
    }
    _, err := store.DB.Exec(stmt.SQL, execArgs{{ $.StructTypeName }}(o)...)
    return err
}

func (store *{{$.StoreName}}) InsertTx(o *{{.StructTypeName}}, tx *pgx.Tx) error {
    
    sql := "{{insertSQLPgx .Fields .TableName}}"
    _, err := tx.Exec(sql,execArgs{{ $.StructTypeName }}(o)...)
    return err
}

func (store *{{$.StoreName}}) UpdateTx(o *{{.StructTypeName}}, tx *pgx.Tx) error {

    sql := "{{updateSQLPgx .Fields .TableName}}"
    _, err := tx.Exec(sql, execArgs{{ $.StructTypeName }}(o)...)
    return err
}
