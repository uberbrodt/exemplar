// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//
// Typically this process would be run using go generate, like this:
//
//	//go:generate stringer -type=Pill
//
// If multiple constants have the same value, the lexically first matching name will
// be used (in the example, Acetaminophen will print as "Paracetamol").
//
// With no arguments, it processes the package in the current directory.
// Otherwise, the arguments must name a single directory holding a Go package
// or a set of Go source files that represent a single Go package.
//
// The -type flag accepts a comma-separated list of types so a single run can
// generate methods for multiple types. The default output file is t_string.go,
// where t is the lower-cased name of the first type listed. It can be overridden
// with the -output flag.
//
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"golang.org/x/tools/go/types"

	_ "golang.org/x/tools/go/gcimporter"
)

var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_string.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tpropertizer [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tpropertizer [flags[ -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("propertizer: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var (
		dir string
		g   Generator
	)
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		g.parsePackageFiles(args)
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"propertizer%s\"; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	///g.Printf("import \"fmt\"\n") // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_properties.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string  // Name of the struct type.
	fields   []Field // Accumulator for the structs fields
	imports  []Import
}

type Import struct {
	ImportedName string
	Path         *ast.BasicLit
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string) {
	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) {
	g.parsePackage(".", names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, name, text, 0)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file: parsedFile,
			pkg:  g.pkg,
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	// Type check the package.
	g.pkg.check(fs, astFiles)
}

// check type-checks the package. The package must be OK to proceed.
func (pkg *Package) check(fs *token.FileSet, astFiles []*ast.File) {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{FakeImportC: true, Error: func(err error) {
		cErr := err.(types.Error)
		if cErr.Soft {
			return
		}
		if strings.Contains(cErr.Msg, "has no field or method") ||
			strings.Contains(cErr.Msg, "invalid operation: cannot call non-function") {
			log.Printf("IGNORED: during package check: %s", cErr.Msg)
			return
		}
		log.Fatalf("checking package: %s", cErr.Msg)
	}}
	info := &types.Info{
		Defs: pkg.defs,
	}
	typesPkg, _ := config.Check(pkg.dir, fs, astFiles, info)
	//if err != nil {
	//log.Fatalf("checking package: %s", err)
	//	}
	pkg.typesPkg = typesPkg
}

// generate produces the String method for the named type.
func (g *Generator) generate(typeName string) {
	fields := make([]Field, 0, 100)
	imports := make([]Import, 0, 100)
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		file.fields = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			fields = append(fields, file.fields...)
			imports = append(imports, file.imports...)

		}
	}

	//g.Printf("import \"fmt\"\n") // Used by all methods.
	if len(fields) == 0 {
		log.Fatalf("no fields defined for type %s", typeName)
	}

	for _, imprt := range imports {
		g.Printf("import %s \n", imprt.Path.Value)
	}

	for _, field := range fields {
		g.buildAccessor(field, typeName)
		g.buildMutator(field, typeName)
	}
}
func (g *Generator) buildAccessor(f Field, typeName string) {
	//Make Id ID per Go std, upper case private fields
	tempStr := strings.Replace(strings.Title(CamelCase(f.name)), "Id", "ID", -1)
	g.Printf("func (this *%s) %s() %s {\n", typeName, tempStr,
		f.typeName)
	g.Printf("  return this.%s \n", f.name)
	g.Printf("}\n")
}

func (g *Generator) buildMutator(f Field, typeName string) {
	tempStr := strings.Replace(strings.Title(CamelCase(f.name)), "Id", "ID", -1)
	g.Printf("func (this *%s) Set%s(x %s) {\n", typeName, tempStr, f.typeName)
	g.Printf("  this.%s = x \n", f.name)
	g.Printf("}\n")
}

var camelingRegex = regexp.MustCompile("[0-9A-Za-z]+")

func CamelCase(src string) string {
	byteSrc := []byte(src)
	chunks := camelingRegex.FindAll(byteSrc, -1)
	for idx, val := range chunks {
		if idx > 0 {
			chunks[idx] = bytes.Title(val)
		}
	}
	return string(bytes.Join(chunks, nil))
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Value represents a declared constant.
type Field struct {
	name     string // The name of the field.
	typeName string //string representation of the Go Type of the field
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE { // We only care about Type declarations.
		return true
	}
	// The name of the type of the constants we are declaring.
	// Can change if this is a multi-element declaration.
	typ := ""
	// Loop over the elements of the declaration. Each element is a ValueSpec:
	// a list of names possibly followed by a type, possibly followed by values.
	// If the type and value are both missing, we carry down the type (and value,
	// but the "go/types" package takes care of that).
	for _, spec := range decl.Specs {
		tspec := spec.(*ast.TypeSpec) // Guaranteed to succeed as this is CONST.
		//if tspec.Type == nil && len(tspec.Values) > 0 {
		//	// "X = 1". With no type but a value, the constant is untyped.
		//	// Skip this vspec and reset the remembered type.
		//	typ = ""
		//	continue
		//}
		if tspec.Type != nil {
			// "X T". We have a type. Remember it.
			typ = tspec.Name.Name
		}
		if typ != f.typeName {
			// This is not the type we're looking for.
			continue
		}
		// We now have a list of names (from one line of source code) all being
		// declared with the desired type.

		structType, ok := tspec.Type.(*ast.StructType)
		if !ok {
			//not a struct type
			continue
		}

		typesObj, typeObjOk := f.pkg.defs[tspec.Name]
		if !typeObjOk {
			log.Fatalf("no type info found for struct %s", typ)
		}

		for _, fieldLine := range structType.Fields.List {
			for _, field := range fieldLine.Names {
				//skip struct padding
				if field.Name == "_" {
					continue
				}
				fieldObj, _, _ := types.LookupFieldOrMethod(typesObj.Type(), false, f.pkg.typesPkg, field.Name)

				typeStr := fieldObj.Type().String()
				tags := findPropertizerTag(fieldLine.Tag)

				if tags.Private {
					log.Printf("Skipping field %s because it's marked private",
						field.Name)
					continue
				}

				if strings.Contains(typeStr, ".") {
					typeSplit := strings.Split(typeStr, ".")
					for _, importSpec := range f.file.Imports {
						if matchImport(typeSplit[0], importSpec) {
							if !importExists(typeSplit[0], f.imports) {
								f.imports = append(f.imports, Import{typeSplit[0], importSpec.Path})
							}
						}
					}
				}

				v := Field{
					name:     field.Name,
					typeName: typeStr,
				}
				f.fields = append(f.fields, v)
			}
		}
	}
	return false
}

type PropertizerTags struct {
	Private bool
}

func findPropertizerTag(tagString *ast.BasicLit) PropertizerTags {
	if tagString != nil {
		sanitized := strings.Replace(tagString.Value, "`", "", -1)
		structtags := strings.Split(sanitized, " ")
		for _, tag := range structtags {
			if strings.Contains(tag, "propertizer") {
				propertizerTags := PropertizerTags{}
				tagVal := strings.Split(tag, ":")[1]
				tagVals := strings.Split(strings.Replace(tagVal, "\"", "", -1), ",")
				for _, property := range tagVals {
					if property == "private" {
						propertizerTags.Private = true
					}
				}
				return propertizerTags
			}
		}
	}
	return PropertizerTags{Private: false}
}

func matchImport(objectImportId string, importSpec *ast.ImportSpec) bool {
	noquotes := strings.Replace(importSpec.Path.Value, "\"", "", -1)
	var lastPathID = noquotes
	if strings.Contains(noquotes, "/") {
		lastPathID = strings.Split(noquotes, "/")[0]
	}
	return objectImportId == lastPathID
}
func importExists(pathName string, imports []Import) bool {
	for _, val := range imports {
		if pathName == val.ImportedName {
			return true
		}
	}
	return false
}
