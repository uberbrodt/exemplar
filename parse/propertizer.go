// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//
// Typically this process would be run using go generate, like this:
//
//	//go:generate stringer -type=Pill
//
// If multiple constants have the same value, the lexically first matching name will
// be used (in the example, Acetaminophen will print as "Paracetamol").
//
// With no arguments, it processes the package in the current directory.
// Otherwise, the arguments must name a single directory holding a Go package
// or a set of Go source files that represent a single Go package.
//
// The -type flag accepts a comma-separated list of types so a single run can
// generate methods for multiple types. The default output file is t_string.go,
// where t is the lower-cased name of the first type listed. It can be overridden
// with the -output flag.
//
package parse

/*
import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	_ "golang.org/x/tools/go/gcimporter"
)

var (
	typeNames     = flag.String("type", "", "comma-separated list of type names; must be set")
	output        = flag.String("output", "", "output file name; default srcdir/<type>_properties.go")
	getterPrefix  = flag.Bool("getterPrefix", false, "Prefix the accessor methods with Get")
	interfaceName = flag.String("interfaceName", "", "If set, creates an interface with the name provided for the struct methods")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tpropertizer [flags] -getterPrefix -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tpropertizer [flags[ -getterPrefix -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("propertizer: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"propertizer%s\"; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	///g.Printf("import \"fmt\"\n") // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_properties.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

func (g *Generator) buildInterfaceAccessor(f Field, typeName string) {
	tempStr := strings.Replace(strings.Title(CamelCase(f.name)), "Id", "ID", -1)
	if *getterPrefix {
		g.Printf("Get%s() %s\n", tempStr, f.typeName)
	} else {
		g.Printf("%s() %s\n", tempStr, f.typeName)
	}
}

func (g *Generator) buildInterfaceMutator(f Field, typeName string) {
	tempStr := strings.Replace(strings.Title(CamelCase(f.name)), "Id", "ID", -1)
	g.Printf("Set%s(x %s) \n", tempStr, f.typeName)
}

func (g *Generator) buildAccessor(f Field, typeName string) {
	//Make Id ID per Go std, upper case private fields
	tempStr := strings.Replace(strings.Title(CamelCase(f.name)), "Id", "ID", -1)
	if *getterPrefix {
		g.Printf("func (this *%s) Get%s() %s {\n", typeName, tempStr,
			f.typeName)
	} else {
		g.Printf("func (this *%s) %s() %s {\n", typeName, tempStr,
			f.typeName)
	}
	g.Printf("  return this.%s \n", f.name)
	g.Printf("}\n")
}




// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

type PropertizerTags struct {
	Private bool
}

func processTypeStr(typeStr string) (typeName, importPath string) {
	if strings.Contains(typeStr, "/") {
		slashSplit := strings.Split(typeStr, "/")
		pkgNameAndType := slashSplit[len(slashSplit)-1]
		pkgName := strings.Split(pkgNameAndType, ".")[0]
		importPath := fmt.Sprintf("%s/%s", strings.Join(slashSplit[0:len(slashSplit)-1], "/"), pkgName)
		return pkgNameAndType, importPath
	} else if strings.Contains(typeStr, ".") {
		dotSplit := strings.Split(typeStr, ".")
		importPath := dotSplit[0]
		pkgNameAndType := typeStr
		return pkgNameAndType, importPath
	} else {
		return typeStr, ""
	}
}

func findPropertizerTag(tagString *ast.BasicLit) PropertizerTags {
	if tagString != nil {
		sanitized := strings.Replace(tagString.Value, "`", "", -1)
		structtags := strings.Split(sanitized, " ")
		for _, tag := range structtags {
			if strings.Contains(tag, "propertizer") {
				propertizerTags := PropertizerTags{}
				tagVal := strings.Split(tag, ":")[1]
				tagVals := strings.Split(strings.Replace(tagVal, "\"", "", -1), ",")
				for _, property := range tagVals {
					if property == "private" {
						propertizerTags.Private = true
					}
				}
				return propertizerTags
			}
		}
	}
	return PropertizerTags{Private: false}
}

func importExists(pathName string, imports []Import) bool {
	for _, val := range imports {
		if pathName == val.ImportedName {
			return true
		}
	}
	return false
}
*/
